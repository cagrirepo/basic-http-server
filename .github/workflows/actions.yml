name: Workflows 
on:
  push:
    branches:
      - main
      - release
  pull_request:
    branches:
      - main
      - release
  workflow_dispatch:
  
jobs:
  shell-execution-for-trigger:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Display the output of echo
        run: echo "Workflow run happened!"

  lint-code-linter:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true 
          DEFAULT_BRANCH: master
          DISABLE_ERRORS: true 
          VALIDATE_JAVA: true 
          
  build-code-maven:
    runs-on: ubuntu-latest
    needs:  lint-code-linter
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }} 
          cache: maven

      - name: Build with Maven
        run: |
          mvn verify sonar:sonar \
          -Dsonar.projectKey=cagrirepo_basic-http-server \
          -Dsonar.organization=cagrirepo \
          -Dsonar.host.url=https://sonarcloud.io
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  snyk-security-scan:
    runs-on: ubuntu-latest
    needs: build-code-maven
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload results to GitHub Code Scanning Panel
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          
  snyk-all-scan-run:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    needs: snyk-security-scan
    steps:
      - uses: actions/checkout@v3
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        continue-on-error: true

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #- uses: actions/setup-node@v3
        #  with:
        #    node-version: 16

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        # Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report || true
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Build the docker image for testing
      #- name: Build a Docker image
        #run: docker build -t your/image-to-test .
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      #- name: Snyk Container monitor
        #run: snyk container monitor your/image-to-test --file=Dockerfile

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
          
  dast-zap-scan:
    runs-on: ubuntu-latest
    needs: snyk-all-scan-run
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://testhtml5.vulnweb.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
  on-demand-trigger:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Manual Trigger
        run: echo "This is a manual trigger happened!"
